function Buildme(appName, inclList, exclList, flags)

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% Buildme allows building of the current directories project in 
% without having to change the output directory or update the .m 
% files list, every time (as seems to be the case with deploytool)
%
% Also it finds all the .m files under the current directory 
%

DEBUG = 1;

currDir = pwd;

% Args 
if ~exist('appName','var')
    [pp,fs] = getpathparts(currDir);
    appName = pp{end};
end
if ~exist('exclList','var')
    exclList = {};
end
if ~exist('flags','var')
    flags = {};
end

% Matlab compiler generates a readme file that overwrites the homer2 one
% that already xists. Before we start build , move readme to temp file and 
% at end of build delete the newly generated readme and move the temp one 
% back. 
if exist('./README.txt','file')
    movefile('./README.txt', 'TEMP.txt');
end

% Find main .m file
appDotMFilesStr = '';
sanity = 100;
while ~exist(appDotMFilesStr, 'file')
    
    appDotMFileMain = sprintf('%s.m', appName);
    targetName = sprintf('.%s%s.exe', filesep, appName);
    
    % Check to make sure main .m file exists
    if ~exist(appDotMFileMain,'file')
        q = menu(sprintf('Could not find the main application file %s.m. Please locate the main application file.', appName), 'OK');
        [filenm, pathnm] = uigetfile({'*.m'}, 'Select main .m file');
        if filenm==0
            return;
        end
        [~, appName, ext] = fileparts(filenm);
        appDotMFileMain = [pathnm, filenm];
        appDotMFilesStr = appDotMFileMain;
    else
        appDotMFilesStr = sprintf('%s%s%s', currDir, filesep, appDotMFileMain');
    end
    
    sanity = sanity-1;
    if sanity<=0
        return;
    end
   
end
appDotMFilesStr = sprintf('-v %s', appDotMFileMain');

% Get all .m files which will go into making the app executable
appDotMFiles = findDotMFiles('.', exclList);
for ii=1:length(inclList)
    appDotMFiles = [appDotMFiles, findDotMFiles(inclList{ii}, exclList)];
end

% Create compile switches string
compileSwitches = '';
for ii=1:length(flags)
    compileSwitches = [compileSwitches, flags{ii}, ' '];
end
compileSwitches = [compileSwitches, ' -w enable:specified_file_mismatch'];
compileSwitches = [compileSwitches, ' -w enable:repeated_file'];
compileSwitches = [compileSwitches, ' -w enable:switch_ignored'];
compileSwitches = [compileSwitches, ' -w enable:missing_lib_sentinel'];
compileSwitches = [compileSwitches, ' -w enable:demo_license'];

%%% Go through all the apps, contruct a string listing all the .m files 
%%% on which each app depends and then compile the app using mcc.


% Remove main m file and remove Buildme.m from app files list 
appDotMFiles = removeEntryFromList(appDotMFileMain, appDotMFiles);
appDotMFiles = removeEntryFromList('Buildme.m', appDotMFiles);

% Construct files list portion of build command
if DEBUG
    fid = fopen('Buildme.log','w');
end
for jj=2:length(appDotMFiles)
    appDotMFilesStr = sprintf('%s -a ''%s''', appDotMFilesStr, appDotMFiles{jj});
    if DEBUG
        fprintf(fid, '%s\n', appDotMFiles{jj});
    end
end

% Complete the final build command and execute it
buildcmdstr = sprintf('mcc -o %s -W main:%s -T link:exe -d ''%s'' %s %s', appName, appName, currDir, compileSwitches, appDotMFilesStr);
disp(buildcmdstr);
eval(buildcmdstr);

% Delete useless readme generated by mcc and replace it with our own
% readme.txt that already exsisted
if exist('./README.txt','file')
    delete('./README.txt');
end
if exist('./TEMP.txt','file')
    movefile('TEMP.txt','./README.txt');
end





% -------------------------------------------------------------------------
function dotmfiles = findDotMFiles(subdir, exclList)

if ~exist('exclList','var')
    exclList = {};
end

dotmfiles = {};
currdir = pwd;

if exist(subdir, 'dir')~=7
    fprintf('Warning: folder %s doesn''t exist under %s\n', subdir, pwd);
    return;
end
cd(subdir);

% If current subjdir is in the exclList then go back to curr dir and exit
subdirFullpath = pwd;

for ii=1:length(exclList)
    if ~isempty(findstr(exclList{ii}, subdirFullpath))
        cd(currdir);
        return;
    end
end

files = dir('*');
if isempty(files)
    return;
end

for ii=1:length(files)
    exclFlag = false;
    if isdotmfile(files(ii))
        for kk=1:length(exclList)
            if strcmp(files(ii).name, exclList{kk})
                exclFlag = true;
            end
        end
        if exclFlag==true
            continue;
        end
        dotmfiles{end+1} = sprintf('%s%s%s', pwd, filesep, files(ii).name);
    elseif files(ii).isdir && ~iscurrdir(files(ii)) && ~isparentdir(files(ii))
        dotmfiles = [dotmfiles, findDotMFiles(files(ii).name, exclList)];
    end
end
cd(currdir);



% -------------------------------------------------------------------------
function b = isdotmfile(file)

b=0;
if file.isdir
    return;
end
if file.name(end) ~= 'm' || file.name(end-1) ~= '.'
    return;
end
b=1;



% -------------------------------------------------------------------------
function b = iscurrdir(file)

b=0;
if ~file.isdir
    return;
end
if isempty(file.name)
    return;
end
if isempty(file.name)
    return;
end
if length(file.name)==1
    if file.name(1)~='.'
        return;
    end
end
if (length(file.name)==2)
    if (file.name(1)~='.') || (file.name(2)~='/' && file.name(2)~='\')
        return;
    end
end
if (length(file.name)>2)
    return;
end

b=1;



% -------------------------------------------------------------------------
function b = isparentdir(file)

b=0;
if ~file.isdir
    return;
end
if isempty(file.name)
    return;
end
if isempty(file.name)
    return;
end
if length(file.name)==1
    return;
end
if (length(file.name)==2)
    if (file.name(1)~='.') || (file.name(2)~='.')
        return;
    end
end
if (length(file.name)==3)
    if (file.name(1)~='.') || (file.name(2)~='.') || (file.name(2)~='/' && file.name(2)~='\')
        return;
    end
end
if (length(file.name)>3)
    return;
end
b=1;



% -------------------------------------------------------------------------
% Helper function: remove name arg from list
function list = removeEntryFromList(name, list)

temp = strfind(list, name);
k=[];
for ii=1:length(temp)
    if ~isempty(temp{ii})
        k=ii;
    end
end
list(k) = [];



